# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Unit tests and coverage

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup LCOV
      uses: hrishikesh-kadam/setup-lcov@v1
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CROSSCOMPILING=1 -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/02_BasicProject/cmake/gcc-arm-none-eabi.cmake -S${{github.workspace}}/02_BasicProject -B${{github.workspace}}/02_BasicProject/build/Debug -G Ninja
      run: cmake -B ${{github.workspace}}/build/Test -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -S${{github.workspace}}/02_BasicProject
    
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build/Test --

    - name: Test
      working-directory: ${{github.workspace}}/build/Test
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} -T test --output-on-failure

    - name: Coverage
      working-directory: ${{github.workspace}}/build/Test
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: make coverage

    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: build/Test/coverage
