<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1 (Python 3.12.3 on linux)" generated="20241024 00:59:01.446" rpa="false" schemaversion="4">
<suite id="s1" name="Test Suite" source="/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests/test2.robot">
<kw name="Setup" library="renode-keywords" type="SETUP">
<msg timestamp="20241024 00:58:56.178" level="TRACE">Arguments: [  ]</msg>
<kw name="Evaluate" library="BuiltIn">
<var>${SYSTEM}</var>
<arg>platform.system()</arg>
<arg>modules=platform</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20241024 00:58:56.178" level="TRACE">Arguments: [ 'platform.system()' | modules='platform' ]</msg>
<msg timestamp="20241024 00:58:56.179" level="TRACE">Return: 'Linux'</msg>
<msg timestamp="20241024 00:58:56.179" level="INFO">${SYSTEM} = Linux</msg>
<status status="PASS" starttime="20241024 00:58:56.178" endtime="20241024 00:58:56.179"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${CONFIGURATION}</var>
<arg>not ${SKIP_RUNNING_SERVER} and ${SERVER_REMOTE_DEBUG}</arg>
<arg>Debug</arg>
<arg>${CONFIGURATION}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20241024 00:58:56.179" level="TRACE">Arguments: [ 'not True and False' | 'Debug' | '${CONFIGURATION}' ]</msg>
<msg timestamp="20241024 00:58:56.179" level="TRACE">Return: 'Release'</msg>
<msg timestamp="20241024 00:58:56.179" level="INFO">${CONFIGURATION} = Release</msg>
<status status="PASS" starttime="20241024 00:58:56.179" endtime="20241024 00:58:56.179"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{PARAMS}</var>
<arg>--robot-server-port</arg>
<arg>${PORT_NUMBER}</arg>
<arg>--hide-log</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20241024 00:58:56.179" level="TRACE">Arguments: [ '--robot-server-port' | '49153' | '--hide-log' ]</msg>
<msg timestamp="20241024 00:58:56.179" level="TRACE">Return: ['--robot-server-port', '49153', '--hide-log']</msg>
<msg timestamp="20241024 00:58:56.179" level="INFO">@{PARAMS} = [ --robot-server-port | 49153 | --hide-log ]</msg>
<status status="PASS" starttime="20241024 00:58:56.179" endtime="20241024 00:58:56.179"/>
</kw>
<if>
<branch type="IF" condition="${DISABLE_GUI}">
<kw name="Insert Into List" library="Collections">
<arg>${PARAMS}</arg>
<arg>0</arg>
<arg>--disable-gui</arg>
<doc>Inserts ``value`` into ``list`` to the position specified with ``index``.</doc>
<status status="NOT RUN" starttime="20241024 00:58:56.179" endtime="20241024 00:58:56.179"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:58:56.179" endtime="20241024 00:58:56.179"/>
</branch>
<status status="PASS" starttime="20241024 00:58:56.179" endtime="20241024 00:58:56.179"/>
</if>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER}">
<kw name="File Should Exist" library="OperatingSystem">
<arg>${DIRECTORY}/${BINARY_NAME}</arg>
<arg>msg=Robot Framework remote server binary not found (${DIRECTORY}/${BINARY_NAME}). Did you forget to build it in ${CONFIGURATION} configuration?</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<status status="NOT RUN" starttime="20241024 00:58:56.180" endtime="20241024 00:58:56.180"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:58:56.179" endtime="20241024 00:58:56.180"/>
</branch>
<status status="PASS" starttime="20241024 00:58:56.179" endtime="20241024 00:58:56.180"/>
</if>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER} and not ${SERVER_REMOTE_DEBUG} and not '${SYSTEM}' == 'Windows' and not ${NET_PLATFORM}">
<kw name="Start Process" library="Process">
<arg>mono</arg>
<arg>${BINARY_NAME}</arg>
<arg>@{PARAMS}</arg>
<arg>cwd=${DIRECTORY}</arg>
<doc>Starts a new process on background.</doc>
<status status="NOT RUN" starttime="20241024 00:58:56.180" endtime="20241024 00:58:56.180"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:58:56.180" endtime="20241024 00:58:56.180"/>
</branch>
<status status="PASS" starttime="20241024 00:58:56.180" endtime="20241024 00:58:56.180"/>
</if>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER} and not ${SERVER_REMOTE_DEBUG} and '${SYSTEM}' == 'Windows'">
<kw name="Start Process" library="Process">
<arg>${BINARY_NAME}</arg>
<arg>@{PARAMS}</arg>
<arg>cwd=${DIRECTORY}</arg>
<arg>shell=true</arg>
<doc>Starts a new process on background.</doc>
<status status="NOT RUN" starttime="20241024 00:58:56.180" endtime="20241024 00:58:56.180"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:58:56.180" endtime="20241024 00:58:56.180"/>
</branch>
<status status="PASS" starttime="20241024 00:58:56.180" endtime="20241024 00:58:56.180"/>
</if>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER} and not ${SERVER_REMOTE_DEBUG} and ${NET_PLATFORM}">
<kw name="Start Process" library="Process">
<arg>dotnet ${BINARY_NAME}</arg>
<arg>@{PARAMS}</arg>
<arg>cwd=${DIRECTORY}</arg>
<arg>shell=true</arg>
<doc>Starts a new process on background.</doc>
<status status="NOT RUN" starttime="20241024 00:58:56.180" endtime="20241024 00:58:56.180"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:58:56.180" endtime="20241024 00:58:56.180"/>
</branch>
<status status="PASS" starttime="20241024 00:58:56.180" endtime="20241024 00:58:56.180"/>
</if>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER} and ${SERVER_REMOTE_DEBUG} and not '${SYSTEM}' == 'Windows' and not ${NET_PLATFORM}">
<kw name="Start Process" library="Process">
<arg>mono</arg>
<arg>--debug</arg>
<arg>--debugger-agent\=transport\=dt_socket,address\=0.0.0.0:${SERVER_REMOTE_PORT},server\=y,suspend\=${SERVER_REMOTE_SUSPEND}</arg>
<arg>${BINARY_NAME}</arg>
<arg>@{PARAMS}</arg>
<arg>cwd=${DIRECTORY}</arg>
<doc>Starts a new process on background.</doc>
<status status="NOT RUN" starttime="20241024 00:58:56.180" endtime="20241024 00:58:56.180"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:58:56.180" endtime="20241024 00:58:56.180"/>
</branch>
<status status="PASS" starttime="20241024 00:58:56.180" endtime="20241024 00:58:56.180"/>
</if>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER} and ${SERVER_REMOTE_DEBUG} and '${SYSTEM}' == 'Windows'">
<kw name="Fatal Error" library="BuiltIn">
<arg>Windows doesn't support server remote debug option.</arg>
<doc>Stops the whole test execution.</doc>
<status status="NOT RUN" starttime="20241024 00:58:56.181" endtime="20241024 00:58:56.181"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:58:56.180" endtime="20241024 00:58:56.181"/>
</branch>
<status status="PASS" starttime="20241024 00:58:56.180" endtime="20241024 00:58:56.181"/>
</if>
<if>
<branch type="IF" condition="not '${SYSTEM}' == 'Windows'">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>60s</arg>
<arg>1s</arg>
<arg>Import Library</arg>
<arg>Remote</arg>
<arg>http://127.0.0.1:${PORT_NUMBER}/</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<msg timestamp="20241024 00:58:56.181" level="TRACE">Arguments: [ '60s' | '1s' | 'Import Library' | 'Remote' | 'http://127.0.0.1:${PORT_NUMBER}/' ]</msg>
<kw name="Import Library" library="BuiltIn">
<arg>Remote</arg>
<arg>http://127.0.0.1:${PORT_NUMBER}/</arg>
<doc>Imports a library with the given name and optional arguments.</doc>
<msg timestamp="20241024 00:58:56.181" level="TRACE">Arguments: [ 'Remote' | 'http://127.0.0.1:${PORT_NUMBER}/' ]</msg>
<msg timestamp="20241024 00:58:56.450" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:58:56.181" endtime="20241024 00:58:56.450"/>
</kw>
<msg timestamp="20241024 00:58:56.450" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:58:56.181" endtime="20241024 00:58:56.450"/>
</kw>
<status status="PASS" starttime="20241024 00:58:56.181" endtime="20241024 00:58:56.450"/>
</branch>
<status status="PASS" starttime="20241024 00:58:56.181" endtime="20241024 00:58:56.450"/>
</if>
<if>
<branch type="IF" condition="'${SYSTEM}' == 'Windows'">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>60s</arg>
<arg>1s</arg>
<arg>Import Library</arg>
<arg>Remote</arg>
<arg>http://localhost:${PORT_NUMBER}/</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<status status="NOT RUN" starttime="20241024 00:58:56.450" endtime="20241024 00:58:56.451"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:58:56.450" endtime="20241024 00:58:56.451"/>
</branch>
<status status="PASS" starttime="20241024 00:58:56.450" endtime="20241024 00:58:56.451"/>
</if>
<kw name="Setup Renode" library="renode-keywords">
<msg timestamp="20241024 00:58:56.451" level="TRACE">Arguments: [  ]</msg>
<kw name="Set Default Uart Timeout" library="Remote">
<arg>${DEFAULT_UART_TIMEOUT}</arg>
<msg timestamp="20241024 00:58:56.451" level="TRACE">Arguments: [ '8' ]</msg>
<msg timestamp="20241024 00:58:56.468" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:58:56.451" endtime="20241024 00:58:56.468"/>
</kw>
<if>
<branch type="IF" condition="${SAVE_LOGS}">
<kw name="Enable Logging To Cache" library="Remote">
<msg timestamp="20241024 00:58:56.468" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20241024 00:58:56.471" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:58:56.468" endtime="20241024 00:58:56.471"/>
</kw>
<status status="PASS" starttime="20241024 00:58:56.468" endtime="20241024 00:58:56.471"/>
</branch>
<status status="PASS" starttime="20241024 00:58:56.468" endtime="20241024 00:58:56.471"/>
</if>
<kw name="Set Variable" library="BuiltIn">
<var>${allowed_chars}</var>
<arg>abcdefghijklmnopqrstuvwxyz01234567890_-</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241024 00:58:56.472" level="TRACE">Arguments: [ 'abcdefghijklmnopqrstuvwxyz01234567890_-' ]</msg>
<msg timestamp="20241024 00:58:56.472" level="TRACE">Return: 'abcdefghijklmnopqrstuvwxyz01234567890_-'</msg>
<msg timestamp="20241024 00:58:56.472" level="INFO">${allowed_chars} = abcdefghijklmnopqrstuvwxyz01234567890_-</msg>
<status status="PASS" starttime="20241024 00:58:56.471" endtime="20241024 00:58:56.472"/>
</kw>
<kw name="Convert To Lower Case" library="String">
<var>${metrics_fname}</var>
<arg>${SUITE_NAME}</arg>
<doc>Converts string to lower case.</doc>
<msg timestamp="20241024 00:58:56.472" level="TRACE">Arguments: [ 'test2' ]</msg>
<msg timestamp="20241024 00:58:56.472" level="TRACE">Return: 'test2'</msg>
<msg timestamp="20241024 00:58:56.472" level="INFO">${metrics_fname} = test2</msg>
<status status="PASS" starttime="20241024 00:58:56.472" endtime="20241024 00:58:56.472"/>
</kw>
<kw name="Replace String" library="String">
<var>${metrics_fname}</var>
<arg>${metrics_fname}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<msg timestamp="20241024 00:58:56.472" level="TRACE">Arguments: [ 'test2' | ' ' | '_' ]</msg>
<msg timestamp="20241024 00:58:56.472" level="TRACE">Return: 'test2'</msg>
<msg timestamp="20241024 00:58:56.472" level="INFO">${metrics_fname} = test2</msg>
<status status="PASS" starttime="20241024 00:58:56.472" endtime="20241024 00:58:56.472"/>
</kw>
<kw name="Replace String Using Regexp" library="String">
<var>${metrics_fname}</var>
<arg>${metrics_fname}</arg>
<arg>[^${allowed_chars}]+</arg>
<arg>${EMPTY}</arg>
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<msg timestamp="20241024 00:58:56.472" level="TRACE">Arguments: [ 'test2' | '[^abcdefghijklmnopqrstuvwxyz01234567890_-]+' | '' ]</msg>
<msg timestamp="20241024 00:58:56.472" level="TRACE">Return: 'test2'</msg>
<msg timestamp="20241024 00:58:56.472" level="INFO">${metrics_fname} = test2</msg>
<status status="PASS" starttime="20241024 00:58:56.472" endtime="20241024 00:58:56.472"/>
</kw>
<kw name="Join Path" library="OperatingSystem">
<var>${metrics_path}</var>
<arg>${RESULTS_DIRECTORY}</arg>
<arg>profiler-${metrics_fname}</arg>
<doc>Joins the given path part(s) to the given base path.</doc>
<msg timestamp="20241024 00:58:56.473" level="TRACE">Arguments: [ '/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests/' | 'profiler-test2' ]</msg>
<msg timestamp="20241024 00:58:56.473" level="TRACE">Return: '/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests/profiler-test2'</msg>
<msg timestamp="20241024 00:58:56.473" level="INFO">${metrics_path} = /home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests/profiler-test2</msg>
<status status="PASS" starttime="20241024 00:58:56.473" endtime="20241024 00:58:56.473"/>
</kw>
<if>
<branch type="IF" condition="${CREATE_EXECUTION_METRICS}">
<kw name="Execute Command" library="Remote">
<arg>EnableProfilerGlobally "${metrics_path}"</arg>
<status status="NOT RUN" starttime="20241024 00:58:56.473" endtime="20241024 00:58:56.473"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:58:56.473" endtime="20241024 00:58:56.473"/>
</branch>
<status status="PASS" starttime="20241024 00:58:56.473" endtime="20241024 00:58:56.473"/>
</if>
<kw name="Reset Emulation" library="Remote">
<msg timestamp="20241024 00:58:56.473" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20241024 00:58:56.483" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:58:56.473" endtime="20241024 00:58:56.483"/>
</kw>
<msg timestamp="20241024 00:58:56.484" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:58:56.451" endtime="20241024 00:58:56.484"/>
</kw>
<msg timestamp="20241024 00:58:56.484" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:58:56.178" endtime="20241024 00:58:56.484"/>
</kw>
<test id="s1-t1" name="Should Boot Zephyr" line="14">
<kw name="Reset Emulation" library="Remote" type="SETUP">
<msg timestamp="20241024 00:58:56.484" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20241024 00:58:56.485" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:58:56.484" endtime="20241024 00:58:56.485"/>
</kw>
<kw name="Prepare Machine">
<msg timestamp="20241024 00:58:56.486" level="TRACE">Arguments: [  ]</msg>
<kw name="Execute Command" library="Remote">
<arg>$bin=@./../../build/zephyr/zephyr.elf</arg>
<msg timestamp="20241024 00:58:56.486" level="TRACE">Arguments: [ '$bin=@./../../build/zephyr/zephyr.elf' ]</msg>
<msg timestamp="20241024 00:58:56.498" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:58:56.486" endtime="20241024 00:58:56.498"/>
</kw>
<kw name="Execute Script" library="Remote">
<arg>${SCRIPT}</arg>
<msg timestamp="20241024 00:58:56.498" level="TRACE">Arguments: [ '/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests/../../renode.resc' ]</msg>
<msg timestamp="20241024 00:58:58.724" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:58:56.498" endtime="20241024 00:58:58.724"/>
</kw>
<kw name="Create Terminal Tester" library="Remote">
<arg>${UART}</arg>
<arg>timeout=1</arg>
<msg timestamp="20241024 00:58:58.724" level="TRACE">Arguments: [ 'sysbus.usart2' | 'timeout=1' ]</msg>
<msg timestamp="20241024 00:58:58.732" level="TRACE">Return: 0</msg>
<status status="PASS" starttime="20241024 00:58:58.724" endtime="20241024 00:58:58.732"/>
</kw>
<msg timestamp="20241024 00:58:58.733" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:58:56.485" endtime="20241024 00:58:58.733"/>
</kw>
<kw name="Start Emulation" library="Remote">
<msg timestamp="20241024 00:58:58.733" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20241024 00:58:58.842" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:58:58.733" endtime="20241024 00:58:58.842"/>
</kw>
<kw name="Wait For Prompt On Uart" library="Remote">
<arg>${PROMPT}</arg>
<msg timestamp="20241024 00:58:58.842" level="TRACE">Arguments: [ 'uart:~$' ]</msg>
<msg timestamp="20241024 00:58:59.005" level="TRACE">Return: {'groups': [], 'line': 'uart:~$', 'timestamp': 1.14575}</msg>
<status status="PASS" starttime="20241024 00:58:58.842" endtime="20241024 00:58:59.005"/>
</kw>
<kw name="Execute Command" library="Remote">
<arg>sysbus.gpioa.muxen1 State</arg>
<msg timestamp="20241024 00:58:59.006" level="TRACE">Arguments: [ 'sysbus.gpioa.muxen1 State' ]</msg>
<msg timestamp="20241024 00:58:59.040" level="TRACE">Return: 'False\n\n'</msg>
<status status="PASS" starttime="20241024 00:58:59.005" endtime="20241024 00:58:59.041"/>
</kw>
<kw name="Provides" library="Remote">
<arg>booted-zephyr</arg>
<msg timestamp="20241024 00:58:59.041" level="TRACE">Arguments: [ 'booted-zephyr' ]</msg>
<msg timestamp="20241024 00:58:59.572" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:58:59.041" endtime="20241024 00:58:59.572"/>
</kw>
<kw name="Test Teardown" library="renode-keywords" type="TEARDOWN">
<msg timestamp="20241024 00:58:59.572" level="TRACE">Arguments: [  ]</msg>
<kw name="Stop Profiler" library="renode-keywords">
<msg timestamp="20241024 00:58:59.572" level="TRACE">Arguments: [  ]</msg>
<if>
<branch type="IF" condition="${PROFILER_PROCESS}">
<kw name="Terminate Process" library="Process">
<arg>${PROFILER_PROCESS}</arg>
<doc>Stops the process gracefully or forcefully.</doc>
<status status="NOT RUN" starttime="20241024 00:58:59.573" endtime="20241024 00:58:59.573"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${PROFILER_PROCESS}</arg>
<arg>None</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="NOT RUN" starttime="20241024 00:58:59.573" endtime="20241024 00:58:59.573"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:58:59.573" endtime="20241024 00:58:59.573"/>
</branch>
<status status="PASS" starttime="20241024 00:58:59.572" endtime="20241024 00:58:59.573"/>
</if>
<msg timestamp="20241024 00:58:59.573" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:58:59.572" endtime="20241024 00:58:59.573"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<var>${failed}</var>
<arg>Set Variable</arg>
<arg>True</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20241024 00:58:59.573" level="TRACE">Arguments: [ 'Set Variable' | 'True' ]</msg>
<msg timestamp="20241024 00:58:59.573" level="TRACE">Return: None</msg>
<msg timestamp="20241024 00:58:59.573" level="INFO">${failed} = None</msg>
<status status="PASS" starttime="20241024 00:58:59.573" endtime="20241024 00:58:59.573"/>
</kw>
<if>
<branch type="IF" condition="${failed}">
<kw name="Strip String" library="String">
<var>${message}</var>
<arg>${TEST_MESSAGE}</arg>
<arg>mode=right</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<status status="NOT RUN" starttime="20241024 00:58:59.573" endtime="20241024 00:58:59.573"/>
</kw>
<kw name="Set Test Message" library="BuiltIn">
<arg>${message}</arg>
<doc>Sets message for the current test case.</doc>
<status status="NOT RUN" starttime="20241024 00:58:59.573" endtime="20241024 00:58:59.573"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:58:59.573" endtime="20241024 00:58:59.573"/>
</branch>
<status status="PASS" starttime="20241024 00:58:59.573" endtime="20241024 00:58:59.573"/>
</if>
<kw name="Run Keyword If Timeout Occurred" library="BuiltIn">
<var>${timed_out}</var>
<arg>Set Variable</arg>
<arg>True</arg>
<doc>Runs the given keyword if either a test or a keyword timeout has occurred.</doc>
<msg timestamp="20241024 00:58:59.573" level="TRACE">Arguments: [ 'Set Variable' | 'True' ]</msg>
<msg timestamp="20241024 00:58:59.574" level="TRACE">Return: None</msg>
<msg timestamp="20241024 00:58:59.574" level="INFO">${timed_out} = None</msg>
<status status="PASS" starttime="20241024 00:58:59.573" endtime="20241024 00:58:59.574"/>
</kw>
<if>
<branch type="IF" condition="${timed_out}">
<return>
<status status="NOT RUN" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.574"/>
</return>
<status status="NOT RUN" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.574"/>
</branch>
<status status="PASS" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.574"/>
</if>
<if>
<branch type="IF" condition="${CREATE_SNAPSHOT_ON_FAIL}">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<arg>Create Snapshot Of Failed Test</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20241024 00:58:59.574" level="TRACE">Arguments: [ 'Create Snapshot Of Failed Test' ]</msg>
<msg timestamp="20241024 00:58:59.574" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.574"/>
</kw>
<status status="PASS" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.574"/>
</branch>
<status status="PASS" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.574"/>
</if>
<if>
<branch type="IF" condition="${SAVE_LOGS}">
<if>
<branch type="IF" condition="&quot;${SAVE_LOGS_WHEN}&quot; == &quot;Always&quot;">
<kw name="Save Test Log" library="renode-keywords">
<status status="NOT RUN" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.574"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.574"/>
</branch>
<branch type="ELSE IF" condition="&quot;${SAVE_LOGS_WHEN}&quot; == &quot;Fail&quot;">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<arg>Save Test Log</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20241024 00:58:59.574" level="TRACE">Arguments: [ 'Save Test Log' ]</msg>
<msg timestamp="20241024 00:58:59.574" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.574"/>
</kw>
<status status="PASS" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.574"/>
</branch>
<status status="PASS" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.574"/>
</if>
<status status="PASS" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.574"/>
</branch>
<status status="PASS" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.574"/>
</if>
<if>
<branch type="IF" condition="${HOLD_ON_ERROR}">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<var>${res}</var>
<arg>Run Keyword And Ignore Error</arg>
<arg>Import Library</arg>
<arg>Dialogs</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="NOT RUN" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.574"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<arg>Run Keywords</arg>
<arg>Run Keyword If</arg>
<arg>'${res[0]}' == 'FAIL'</arg>
<arg>Log</arg>
<arg>Couldn't load the Dialogs library - interactive debugging is not possible</arg>
<arg>console=True</arg>
<arg>AND</arg>
<arg>Run Keyword If</arg>
<arg>'${res[0]}' != 'FAIL'</arg>
<arg>Open GUI</arg>
<arg>AND</arg>
<arg>Run Keyword If</arg>
<arg>'${res[0]}' != 'FAIL'</arg>
<arg>Pause Execution</arg>
<arg>Test failed. Press OK once done debugging.</arg>
<arg>AND</arg>
<arg>Run Keyword If</arg>
<arg>'${res[0]}' != 'FAIL'</arg>
<arg>Close GUI</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="NOT RUN" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.575"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.575"/>
</branch>
<status status="PASS" starttime="20241024 00:58:59.574" endtime="20241024 00:58:59.575"/>
</if>
<kw name="Reset Emulation" library="Remote">
<msg timestamp="20241024 00:58:59.575" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20241024 00:58:59.618" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:58:59.575" endtime="20241024 00:58:59.618"/>
</kw>
<kw name="Clear Cached Log" library="Remote">
<msg timestamp="20241024 00:58:59.619" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20241024 00:58:59.625" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:58:59.619" endtime="20241024 00:58:59.625"/>
</kw>
<msg timestamp="20241024 00:58:59.625" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:58:59.572" endtime="20241024 00:58:59.625"/>
</kw>
<doc>Boots Zephyr on the Leon3 platform.</doc>
<tag>uart</tag>
<tag>zephyr</tag>
<status status="PASS" starttime="20241024 00:58:56.484" endtime="20241024 00:58:59.625"/>
</test>
<test id="s1-t2" name="Should Print Version" line="27">
<kw name="Reset Emulation" library="Remote" type="SETUP">
<msg timestamp="20241024 00:58:59.626" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20241024 00:58:59.629" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:58:59.626" endtime="20241024 00:58:59.629"/>
</kw>
<kw name="Requires" library="Remote">
<arg>booted-zephyr</arg>
<msg timestamp="20241024 00:58:59.629" level="TRACE">Arguments: [ 'booted-zephyr' ]</msg>
<msg timestamp="20241024 00:59:00.234" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:58:59.629" endtime="20241024 00:59:00.234"/>
</kw>
<kw name="Write Line To Uart" library="Remote">
<arg>version</arg>
<msg timestamp="20241024 00:59:00.234" level="TRACE">Arguments: [ 'version' ]</msg>
<msg timestamp="20241024 00:59:00.249" level="TRACE">Return: {'groups': [], 'line': '', 'timestamp': 0.0}</msg>
<status status="PASS" starttime="20241024 00:59:00.234" endtime="20241024 00:59:00.249"/>
</kw>
<kw name="Wait For Line On Uart" library="Remote">
<arg>Zephyr version 3.7.0</arg>
<msg timestamp="20241024 00:59:00.249" level="TRACE">Arguments: [ 'Zephyr version 3.7.0' ]</msg>
<msg timestamp="20241024 00:59:01.088" level="FAIL">InvalidOperationException: Terminal tester failed!

Full report:
([host: 10/24/2024 12:59:00 AM, virt: 1.30349] Attached to UART event: success)
[host: 10/24/2024 12:59:00 AM, virt:       1] 8*** Booting Zephyr OS build v3.7.0-4958-g69b73ebb0ab9 ***
[host: 10/24/2024 12:59:00 AM, virt:       2] uart:~$ 8Zephyr Example Application 1.0.0
[host: 10/24/2024 12:59:00 AM, virt:       2] uart:~$ 8Use the sensor to change LED blinking period
[host: 10/24/2024 12:59:00 AM, virt:       3] uart:~$ 8[00:00:00.001,000] &lt;inf&gt; util_drv: UtilDriver Initialized
[host: 10/24/2024 12:59:00 AM, virt:       3] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; mux_drv: MuxDriver initialized
[host: 10/24/2024 12:59:00 AM, virt:       4] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; lckr_stat: I2C: Device is ready.
[host: 10/24/2024 12:59:00 AM, virt:       5] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; lckr_stat: LockerStatusReader initialized
[host: 10/24/2024 12:59:00 AM, virt:       5] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; lckr_drv: LockerDriver Initialized
[host: 10/24/2024 12:59:00 AM, virt:       6] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; lckr_drv: Opening locker 1
uart:~$ 8uart:~$ version [[no newline]]
([host: 10/24/2024 12:59:00 AM, virt: 252.97516] Line containing &gt;&gt;version&lt;&lt; event: success)
[host: 10/24/2024 12:59:00 AM, virt:     253] 
[host: 10/24/2024 12:59:00 AM, virt:     253] version: command not found
[host: 10/24/2024 12:59:00 AM, virt:     287] uart:~$ 8[00:00:00.503,000] &lt;inf&gt; lckr_drv: mainThreadLockerDriver entered
[host: 10/24/2024 12:59:00 AM, virt:     288] uart:~$ 8[00:00:00.503,000] &lt;inf&gt; lckr_stat: loopLockerStatusReader entered
[host: 10/24/2024 12:59:00 AM, virt:     288] uart:~$ 8[00:00:01.204,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:00 AM, virt:     516] uart:~$ 8uart:~$ 8[00:00:01.704,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:00 AM, virt:     517] uart:~$ 8[00:00:02.003,000] &lt;inf&gt; lckr_drv: Releasing all outputs
[host: 10/24/2024 12:59:00 AM, virt:     517] uart:~$ 8[00:00:02.405,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:00 AM, virt:     745] uart:~$ 8uart:~$ 8[00:00:02.905,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:00 AM, virt:     746] uart:~$ 8[00:00:03.606,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:00 AM, virt:     974] uart:~$ 8uart:~$ 8[00:00:04.106,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:00 AM, virt:     975] uart:~$ 8[00:00:04.109,000] &lt;inf&gt; lckr_drv: Locker closed
[host: 10/24/2024 12:59:00 AM, virt:     976] uart:~$ 8[00:00:04.807,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:01 AM, virt:    1203] uart:~$ 8uart:~$ 8[00:00:05.307,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:01 AM, virt:    1204] uart:~$ 8[00:00:06.008,000] &lt;err&gt; lckr_stat: Error reading i2c
uart:~$ 8uart:~$  [[no newline]]
([host: 10/24/2024 12:59:01 AM, virt:  1254.2] Line containing &gt;&gt;Zephyr version 3.7.0&lt;&lt; event: failure)
--- Current line buffer contains 19 characters: &gt;&gt;uart:~$ 8uart:~$ &lt;&lt;

</msg>
<msg timestamp="20241024 00:59:01.088" level="DEBUG">InvalidOperationException:   at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&amp;)
  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x0006a] in &lt;aeea2e33ea654cfabae63b60ba0e127a&gt;:0 
</msg>
<status status="FAIL" starttime="20241024 00:59:00.249" endtime="20241024 00:59:01.088"/>
</kw>
<kw name="Test Teardown" library="renode-keywords" type="TEARDOWN">
<msg timestamp="20241024 00:59:01.088" level="TRACE">Arguments: [  ]</msg>
<kw name="Stop Profiler" library="renode-keywords">
<msg timestamp="20241024 00:59:01.088" level="TRACE">Arguments: [  ]</msg>
<if>
<branch type="IF" condition="${PROFILER_PROCESS}">
<kw name="Terminate Process" library="Process">
<arg>${PROFILER_PROCESS}</arg>
<doc>Stops the process gracefully or forcefully.</doc>
<status status="NOT RUN" starttime="20241024 00:59:01.088" endtime="20241024 00:59:01.088"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${PROFILER_PROCESS}</arg>
<arg>None</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="NOT RUN" starttime="20241024 00:59:01.088" endtime="20241024 00:59:01.089"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:59:01.088" endtime="20241024 00:59:01.089"/>
</branch>
<status status="PASS" starttime="20241024 00:59:01.088" endtime="20241024 00:59:01.089"/>
</if>
<msg timestamp="20241024 00:59:01.089" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:59:01.088" endtime="20241024 00:59:01.089"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<var>${failed}</var>
<arg>Set Variable</arg>
<arg>True</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20241024 00:59:01.089" level="TRACE">Arguments: [ 'Set Variable' | 'True' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<arg>True</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241024 00:59:01.089" level="TRACE">Arguments: [ 'True' ]</msg>
<msg timestamp="20241024 00:59:01.089" level="TRACE">Return: 'True'</msg>
<status status="PASS" starttime="20241024 00:59:01.089" endtime="20241024 00:59:01.089"/>
</kw>
<msg timestamp="20241024 00:59:01.089" level="TRACE">Return: 'True'</msg>
<msg timestamp="20241024 00:59:01.089" level="INFO">${failed} = True</msg>
<status status="PASS" starttime="20241024 00:59:01.089" endtime="20241024 00:59:01.089"/>
</kw>
<if>
<branch type="IF" condition="${failed}">
<kw name="Strip String" library="String">
<var>${message}</var>
<arg>${TEST_MESSAGE}</arg>
<arg>mode=right</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20241024 00:59:01.089" level="TRACE">Arguments: [ 'InvalidOperationException: Terminal tester failed!\n\nFull report:\n([host: 10/24/2024 12:59:00 AM, virt: 1.30349] Attached to UART event: success)\n[host: 10/24/2024 12:59:00 AM, virt:       1] 8*** Booting Zephyr OS build v3.7.0-4958-g69b73ebb0ab9 ***\n[host: 10/24/2024 12:59:00 AM, virt:       2] uart:~$ 8Zephyr Example Application 1.0.0\n[host: 10/24/2024 12:59:00 AM, virt:       2] uart:~$ 8Use the sensor to change LED blinking period\n[host: 10/24/2024 12:59:00 AM, virt:       3] uart:~$ 8[00:00:00.001,000] &lt;inf&gt; util_drv: UtilDriver Initialized\n[host: 10/24/2024 12:59:00 AM, virt:       3] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; mux_drv: MuxDriver initialized\n[host: 10/24/2024 12:59:00 AM, virt:       4] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; lckr_stat: I2C: Device is ready.\n[host: 10/24/2024 12:59:00 AM, virt:       5] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; lckr_stat: LockerStatusReader initialized\n[host: 10/24/2024 12:59:00 AM, virt:       5] uart:~$ 8[00:00:00.002,000] &lt;...\n    [ Message content over the limit has been removed. ]\n...rt:     517] uart:~$ 8[00:00:02.405,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:00 AM, virt:     745] uart:~$ 8uart:~$ 8[00:00:02.905,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:00 AM, virt:     746] uart:~$ 8[00:00:03.606,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:00 AM, virt:     974] uart:~$ 8uart:~$ 8[00:00:04.106,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:00 AM, virt:     975] uart:~$ 8[00:00:04.109,000] &lt;inf&gt; lckr_drv: Locker closed\n[host: 10/24/2024 12:59:00 AM, virt:     976] uart:~$ 8[00:00:04.807,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:01 AM, virt:    1203] uart:~$ 8uart:~$ 8[00:00:05.307,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:01 AM, virt:    1204] uart:~$ 8[00:00:06.008,000] &lt;err&gt; lckr_stat: Error reading i2c\nuart:~$ 8uart:~$  [[no newline]]\n([host: 10/24/2024 12:59:01 AM, virt:  1254.2] Line containing &gt;&gt;Zephyr version 3.7.0&lt;&lt; event: failure)\n--- Current line buffer contains 19 characters: &gt;&gt;uart:~$ 8uart:~$ &lt;&lt;\n' | mode='right' ]</msg>
<msg timestamp="20241024 00:59:01.089" level="TRACE">Return: 'InvalidOperationException: Terminal tester failed!\n\nFull report:\n([host: 10/24/2024 12:59:00 AM, virt: 1.30349] Attached to UART event: success)\n[host: 10/24/2024 12:59:00 AM, virt:       1] 8*** Booting Zephyr OS build v3.7.0-4958-g69b73ebb0ab9 ***\n[host: 10/24/2024 12:59:00 AM, virt:       2] uart:~$ 8Zephyr Example Application 1.0.0\n[host: 10/24/2024 12:59:00 AM, virt:       2] uart:~$ 8Use the sensor to change LED blinking period\n[host: 10/24/2024 12:59:00 AM, virt:       3] uart:~$ 8[00:00:00.001,000] &lt;inf&gt; util_drv: UtilDriver Initialized\n[host: 10/24/2024 12:59:00 AM, virt:       3] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; mux_drv: MuxDriver initialized\n[host: 10/24/2024 12:59:00 AM, virt:       4] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; lckr_stat: I2C: Device is ready.\n[host: 10/24/2024 12:59:00 AM, virt:       5] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; lckr_stat: LockerStatusReader initialized\n[host: 10/24/2024 12:59:00 AM, virt:       5] uart:~$ 8[00:00:00.002,000] &lt;...\n    [ Message content over the limit has been removed. ]\n...rt:     517] uart:~$ 8[00:00:02.405,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:00 AM, virt:     745] uart:~$ 8uart:~$ 8[00:00:02.905,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:00 AM, virt:     746] uart:~$ 8[00:00:03.606,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:00 AM, virt:     974] uart:~$ 8uart:~$ 8[00:00:04.106,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:00 AM, virt:     975] uart:~$ 8[00:00:04.109,000] &lt;inf&gt; lckr_drv: Locker closed\n[host: 10/24/2024 12:59:00 AM, virt:     976] uart:~$ 8[00:00:04.807,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:01 AM, virt:    1203] uart:~$ 8uart:~$ 8[00:00:05.307,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:01 AM, virt:    1204] uart:~$ 8[00:00:06.008,000] &lt;err&gt; lckr_stat: Error reading i2c\nuart:~$ 8uart:~$  [[no newline]]\n([host: 10/24/2024 12:59:01 AM, virt:  1254.2] Line containing &gt;&gt;Zephyr version 3.7.0&lt;&lt; event: failure)\n--- Current line buffer contains 19 characters: &gt;&gt;uart:~$ 8uart:~$ &lt;&lt;'</msg>
<msg timestamp="20241024 00:59:01.089" level="INFO">${message} = InvalidOperationException: Terminal tester failed!

Full report:
([host: 10/24/2024 12:59:00 AM, virt: 1.30349] Attached to UART event: success)
[host: 10/24/2024 12:59:00 AM, virt:       1] 8*** Boot...</msg>
<status status="PASS" starttime="20241024 00:59:01.089" endtime="20241024 00:59:01.089"/>
</kw>
<kw name="Set Test Message" library="BuiltIn">
<arg>${message}</arg>
<doc>Sets message for the current test case.</doc>
<msg timestamp="20241024 00:59:01.089" level="TRACE">Arguments: [ 'InvalidOperationException: Terminal tester failed!\n\nFull report:\n([host: 10/24/2024 12:59:00 AM, virt: 1.30349] Attached to UART event: success)\n[host: 10/24/2024 12:59:00 AM, virt:       1] 8*** Booting Zephyr OS build v3.7.0-4958-g69b73ebb0ab9 ***\n[host: 10/24/2024 12:59:00 AM, virt:       2] uart:~$ 8Zephyr Example Application 1.0.0\n[host: 10/24/2024 12:59:00 AM, virt:       2] uart:~$ 8Use the sensor to change LED blinking period\n[host: 10/24/2024 12:59:00 AM, virt:       3] uart:~$ 8[00:00:00.001,000] &lt;inf&gt; util_drv: UtilDriver Initialized\n[host: 10/24/2024 12:59:00 AM, virt:       3] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; mux_drv: MuxDriver initialized\n[host: 10/24/2024 12:59:00 AM, virt:       4] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; lckr_stat: I2C: Device is ready.\n[host: 10/24/2024 12:59:00 AM, virt:       5] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; lckr_stat: LockerStatusReader initialized\n[host: 10/24/2024 12:59:00 AM, virt:       5] uart:~$ 8[00:00:00.002,000] &lt;...\n    [ Message content over the limit has been removed. ]\n...rt:     517] uart:~$ 8[00:00:02.405,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:00 AM, virt:     745] uart:~$ 8uart:~$ 8[00:00:02.905,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:00 AM, virt:     746] uart:~$ 8[00:00:03.606,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:00 AM, virt:     974] uart:~$ 8uart:~$ 8[00:00:04.106,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:00 AM, virt:     975] uart:~$ 8[00:00:04.109,000] &lt;inf&gt; lckr_drv: Locker closed\n[host: 10/24/2024 12:59:00 AM, virt:     976] uart:~$ 8[00:00:04.807,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:01 AM, virt:    1203] uart:~$ 8uart:~$ 8[00:00:05.307,000] &lt;err&gt; lckr_stat: Error reading i2c\n[host: 10/24/2024 12:59:01 AM, virt:    1204] uart:~$ 8[00:00:06.008,000] &lt;err&gt; lckr_stat: Error reading i2c\nuart:~$ 8uart:~$  [[no newline]]\n([host: 10/24/2024 12:59:01 AM, virt:  1254.2] Line containing &gt;&gt;Zephyr version 3.7.0&lt;&lt; event: failure)\n--- Current line buffer contains 19 characters: &gt;&gt;uart:~$ 8uart:~$ &lt;&lt;' ]</msg>
<msg timestamp="20241024 00:59:01.089" level="INFO">Set test message to:
InvalidOperationException: Terminal tester failed!

Full report:
([host: 10/24/2024 12:59:00 AM, virt: 1.30349] Attached to UART event: success)
[host: 10/24/2024 12:59:00 AM, virt:       1] 8*** Booting Zephyr OS build v3.7.0-4958-g69b73ebb0ab9 ***
[host: 10/24/2024 12:59:00 AM, virt:       2] uart:~$ 8Zephyr Example Application 1.0.0
[host: 10/24/2024 12:59:00 AM, virt:       2] uart:~$ 8Use the sensor to change LED blinking period
[host: 10/24/2024 12:59:00 AM, virt:       3] uart:~$ 8[00:00:00.001,000] &lt;inf&gt; util_drv: UtilDriver Initialized
[host: 10/24/2024 12:59:00 AM, virt:       3] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; mux_drv: MuxDriver initialized
[host: 10/24/2024 12:59:00 AM, virt:       4] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; lckr_stat: I2C: Device is ready.
[host: 10/24/2024 12:59:00 AM, virt:       5] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; lckr_stat: LockerStatusReader initialized
[host: 10/24/2024 12:59:00 AM, virt:       5] uart:~$ 8[00:00:00.002,000] &lt;...
    [ Message content over the limit has been removed. ]
...rt:     517] uart:~$ 8[00:00:02.405,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:00 AM, virt:     745] uart:~$ 8uart:~$ 8[00:00:02.905,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:00 AM, virt:     746] uart:~$ 8[00:00:03.606,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:00 AM, virt:     974] uart:~$ 8uart:~$ 8[00:00:04.106,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:00 AM, virt:     975] uart:~$ 8[00:00:04.109,000] &lt;inf&gt; lckr_drv: Locker closed
[host: 10/24/2024 12:59:00 AM, virt:     976] uart:~$ 8[00:00:04.807,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:01 AM, virt:    1203] uart:~$ 8uart:~$ 8[00:00:05.307,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:01 AM, virt:    1204] uart:~$ 8[00:00:06.008,000] &lt;err&gt; lckr_stat: Error reading i2c
uart:~$ 8uart:~$  [[no newline]]
([host: 10/24/2024 12:59:01 AM, virt:  1254.2] Line containing &gt;&gt;Zephyr version 3.7.0&lt;&lt; event: failure)
--- Current line buffer contains 19 characters: &gt;&gt;uart:~$ 8uart:~$ &lt;&lt;</msg>
<msg timestamp="20241024 00:59:01.090" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:59:01.089" endtime="20241024 00:59:01.090"/>
</kw>
<status status="PASS" starttime="20241024 00:59:01.089" endtime="20241024 00:59:01.090"/>
</branch>
<status status="PASS" starttime="20241024 00:59:01.089" endtime="20241024 00:59:01.090"/>
</if>
<kw name="Run Keyword If Timeout Occurred" library="BuiltIn">
<var>${timed_out}</var>
<arg>Set Variable</arg>
<arg>True</arg>
<doc>Runs the given keyword if either a test or a keyword timeout has occurred.</doc>
<msg timestamp="20241024 00:59:01.090" level="TRACE">Arguments: [ 'Set Variable' | 'True' ]</msg>
<msg timestamp="20241024 00:59:01.090" level="TRACE">Return: None</msg>
<msg timestamp="20241024 00:59:01.090" level="INFO">${timed_out} = None</msg>
<status status="PASS" starttime="20241024 00:59:01.090" endtime="20241024 00:59:01.090"/>
</kw>
<if>
<branch type="IF" condition="${timed_out}">
<return>
<status status="NOT RUN" starttime="20241024 00:59:01.090" endtime="20241024 00:59:01.090"/>
</return>
<status status="NOT RUN" starttime="20241024 00:59:01.090" endtime="20241024 00:59:01.090"/>
</branch>
<status status="PASS" starttime="20241024 00:59:01.090" endtime="20241024 00:59:01.090"/>
</if>
<if>
<branch type="IF" condition="${CREATE_SNAPSHOT_ON_FAIL}">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<arg>Create Snapshot Of Failed Test</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20241024 00:59:01.090" level="TRACE">Arguments: [ 'Create Snapshot Of Failed Test' ]</msg>
<kw name="Create Snapshot Of Failed Test" library="renode-keywords">
<msg timestamp="20241024 00:59:01.090" level="TRACE">Arguments: [  ]</msg>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'skipped' in @{TEST TAGS}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20241024 00:59:01.091" level="TRACE">Arguments: [ "'skipped' in ['uart', 'zephyr']" ]</msg>
<msg timestamp="20241024 00:59:01.091" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:59:01.090" endtime="20241024 00:59:01.091"/>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<var>${retry_index}</var>
<arg>\${RETRYFAILED_RETRY_INDEX}</arg>
<arg>0</arg>
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<msg timestamp="20241024 00:59:01.091" level="TRACE">Arguments: [ '\\${RETRYFAILED_RETRY_INDEX}' | '0' ]</msg>
<msg timestamp="20241024 00:59:01.091" level="TRACE">Return: '0'</msg>
<msg timestamp="20241024 00:59:01.091" level="INFO">${retry_index} = 0</msg>
<status status="PASS" starttime="20241024 00:59:01.091" endtime="20241024 00:59:01.091"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${test_name}</var>
<arg>${SUITE NAME}.${TEST NAME}.fail${retry_index}.save</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241024 00:59:01.091" level="TRACE">Arguments: [ 'test2.Should Print Version.fail0.save' ]</msg>
<msg timestamp="20241024 00:59:01.091" level="TRACE">Return: 'test2.Should Print Version.fail0.save'</msg>
<msg timestamp="20241024 00:59:01.091" level="INFO">${test_name} = test2.Should Print Version.fail0.save</msg>
<status status="PASS" starttime="20241024 00:59:01.091" endtime="20241024 00:59:01.091"/>
</kw>
<kw name="Sanitize Test Name" library="renode-keywords">
<var>${test_name}</var>
<arg>${test_name}</arg>
<msg timestamp="20241024 00:59:01.092" level="TRACE">Arguments: [ ${test_name}='test2.Should Print Version.fail0.save' ]</msg>
<kw name="Replace String" library="String">
<var>${test_name}</var>
<arg>${test_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<msg timestamp="20241024 00:59:01.092" level="TRACE">Arguments: [ 'test2.Should Print Version.fail0.save' | ' ' | '_' ]</msg>
<msg timestamp="20241024 00:59:01.092" level="TRACE">Return: 'test2.Should_Print_Version.fail0.save'</msg>
<msg timestamp="20241024 00:59:01.092" level="INFO">${test_name} = test2.Should_Print_Version.fail0.save</msg>
<status status="PASS" starttime="20241024 00:59:01.092" endtime="20241024 00:59:01.092"/>
</kw>
<kw name="Replace String Using Regexp" library="String">
<var>${test_name}</var>
<arg>${test_name}</arg>
<arg>[/""]</arg>
<arg>-</arg>
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<msg timestamp="20241024 00:59:01.092" level="TRACE">Arguments: [ 'test2.Should_Print_Version.fail0.save' | '[/""]' | '-' ]</msg>
<msg timestamp="20241024 00:59:01.092" level="TRACE">Return: 'test2.Should_Print_Version.fail0.save'</msg>
<msg timestamp="20241024 00:59:01.092" level="INFO">${test_name} = test2.Should_Print_Version.fail0.save</msg>
<status status="PASS" starttime="20241024 00:59:01.092" endtime="20241024 00:59:01.092"/>
</kw>
<return>
<value>${test_name}</value>
<status status="PASS" starttime="20241024 00:59:01.092" endtime="20241024 00:59:01.092"/>
</return>
<msg timestamp="20241024 00:59:01.092" level="TRACE">Return: 'test2.Should_Print_Version.fail0.save'</msg>
<msg timestamp="20241024 00:59:01.092" level="INFO">${test_name} = test2.Should_Print_Version.fail0.save</msg>
<status status="PASS" starttime="20241024 00:59:01.091" endtime="20241024 00:59:01.092"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${snapshots_dir}</var>
<arg>${RESULTS_DIRECTORY}/snapshots</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241024 00:59:01.092" level="TRACE">Arguments: [ '/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//snapshots' ]</msg>
<msg timestamp="20241024 00:59:01.092" level="TRACE">Return: '/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//snapshots'</msg>
<msg timestamp="20241024 00:59:01.092" level="INFO">${snapshots_dir} = /home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//snapshots</msg>
<status status="PASS" starttime="20241024 00:59:01.092" endtime="20241024 00:59:01.092"/>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<arg>${snapshots_dir}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20241024 00:59:01.092" level="TRACE">Arguments: [ '/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//snapshots' ]</msg>
<msg timestamp="20241024 00:59:01.092" level="INFO" html="true">Directory '&lt;a href="file:///home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests/snapshots"&gt;/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests/snapshots&lt;/a&gt;' already exists.</msg>
<msg timestamp="20241024 00:59:01.092" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:59:01.092" endtime="20241024 00:59:01.092"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${snapshot_path}</var>
<arg>"${snapshots_dir}/${test_name}"</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241024 00:59:01.093" level="TRACE">Arguments: [ '"/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//snapshots/test2.Should_Print_Version.fail0.save"' ]</msg>
<msg timestamp="20241024 00:59:01.093" level="TRACE">Return: '"/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//snapshots/test2.Should_Print_Version.fail0.save"'</msg>
<msg timestamp="20241024 00:59:01.093" level="INFO">${snapshot_path} = "/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//snapshots/test2.Should_Print_Version.fail0.save"</msg>
<status status="PASS" starttime="20241024 00:59:01.093" endtime="20241024 00:59:01.093"/>
</kw>
<kw name="Execute Command" library="Remote">
<arg>Save ${snapshot_path}</arg>
<msg timestamp="20241024 00:59:01.093" level="TRACE">Arguments: [ 'Save "/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//snapshots/test2.Should_Print_Version.fail0.save"' ]</msg>
<msg timestamp="20241024 00:59:01.171" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:59:01.093" endtime="20241024 00:59:01.171"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>!!!!! Emulation's state saved to ${snapshot_path}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20241024 00:59:01.171" level="TRACE">Arguments: [ '!!!!! Emulation\'s state saved to "/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//snapshots/test2.Should_Print_Version.fail0.save"' ]</msg>
<msg timestamp="20241024 00:59:01.171" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:59:01.171" endtime="20241024 00:59:01.171"/>
</kw>
<msg timestamp="20241024 00:59:01.171" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:59:01.090" endtime="20241024 00:59:01.171"/>
</kw>
<msg timestamp="20241024 00:59:01.171" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:59:01.090" endtime="20241024 00:59:01.171"/>
</kw>
<status status="PASS" starttime="20241024 00:59:01.090" endtime="20241024 00:59:01.171"/>
</branch>
<status status="PASS" starttime="20241024 00:59:01.090" endtime="20241024 00:59:01.171"/>
</if>
<if>
<branch type="IF" condition="${SAVE_LOGS}">
<if>
<branch type="IF" condition="&quot;${SAVE_LOGS_WHEN}&quot; == &quot;Always&quot;">
<kw name="Save Test Log" library="renode-keywords">
<status status="NOT RUN" starttime="20241024 00:59:01.171" endtime="20241024 00:59:01.171"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:59:01.171" endtime="20241024 00:59:01.171"/>
</branch>
<branch type="ELSE IF" condition="&quot;${SAVE_LOGS_WHEN}&quot; == &quot;Fail&quot;">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<arg>Save Test Log</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20241024 00:59:01.172" level="TRACE">Arguments: [ 'Save Test Log' ]</msg>
<kw name="Save Test Log" library="renode-keywords">
<msg timestamp="20241024 00:59:01.172" level="TRACE">Arguments: [  ]</msg>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'skipped' in @{TEST TAGS}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20241024 00:59:01.172" level="TRACE">Arguments: [ "'skipped' in ['uart', 'zephyr']" ]</msg>
<msg timestamp="20241024 00:59:01.172" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:59:01.172" endtime="20241024 00:59:01.172"/>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<var>${retry_index}</var>
<arg>\${RETRYFAILED_RETRY_INDEX}</arg>
<arg>0</arg>
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<msg timestamp="20241024 00:59:01.172" level="TRACE">Arguments: [ '\\${RETRYFAILED_RETRY_INDEX}' | '0' ]</msg>
<msg timestamp="20241024 00:59:01.173" level="TRACE">Return: '0'</msg>
<msg timestamp="20241024 00:59:01.173" level="INFO">${retry_index} = 0</msg>
<status status="PASS" starttime="20241024 00:59:01.172" endtime="20241024 00:59:01.173"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${test_name}</var>
<arg>${SUITE NAME}.${TEST NAME}.fail${retry_index}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241024 00:59:01.173" level="TRACE">Arguments: [ 'test2.Should Print Version.fail0' ]</msg>
<msg timestamp="20241024 00:59:01.173" level="TRACE">Return: 'test2.Should Print Version.fail0'</msg>
<msg timestamp="20241024 00:59:01.173" level="INFO">${test_name} = test2.Should Print Version.fail0</msg>
<status status="PASS" starttime="20241024 00:59:01.173" endtime="20241024 00:59:01.173"/>
</kw>
<kw name="Sanitize Test Name" library="renode-keywords">
<var>${test_name}</var>
<arg>${test_name}</arg>
<msg timestamp="20241024 00:59:01.173" level="TRACE">Arguments: [ ${test_name}='test2.Should Print Version.fail0' ]</msg>
<kw name="Replace String" library="String">
<var>${test_name}</var>
<arg>${test_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<msg timestamp="20241024 00:59:01.173" level="TRACE">Arguments: [ 'test2.Should Print Version.fail0' | ' ' | '_' ]</msg>
<msg timestamp="20241024 00:59:01.173" level="TRACE">Return: 'test2.Should_Print_Version.fail0'</msg>
<msg timestamp="20241024 00:59:01.173" level="INFO">${test_name} = test2.Should_Print_Version.fail0</msg>
<status status="PASS" starttime="20241024 00:59:01.173" endtime="20241024 00:59:01.173"/>
</kw>
<kw name="Replace String Using Regexp" library="String">
<var>${test_name}</var>
<arg>${test_name}</arg>
<arg>[/""]</arg>
<arg>-</arg>
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<msg timestamp="20241024 00:59:01.173" level="TRACE">Arguments: [ 'test2.Should_Print_Version.fail0' | '[/""]' | '-' ]</msg>
<msg timestamp="20241024 00:59:01.173" level="TRACE">Return: 'test2.Should_Print_Version.fail0'</msg>
<msg timestamp="20241024 00:59:01.173" level="INFO">${test_name} = test2.Should_Print_Version.fail0</msg>
<status status="PASS" starttime="20241024 00:59:01.173" endtime="20241024 00:59:01.173"/>
</kw>
<return>
<value>${test_name}</value>
<status status="PASS" starttime="20241024 00:59:01.174" endtime="20241024 00:59:01.174"/>
</return>
<msg timestamp="20241024 00:59:01.174" level="TRACE">Return: 'test2.Should_Print_Version.fail0'</msg>
<msg timestamp="20241024 00:59:01.174" level="INFO">${test_name} = test2.Should_Print_Version.fail0</msg>
<status status="PASS" starttime="20241024 00:59:01.173" endtime="20241024 00:59:01.174"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${logs_dir}</var>
<arg>${RESULTS_DIRECTORY}/logs</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241024 00:59:01.174" level="TRACE">Arguments: [ '/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//logs' ]</msg>
<msg timestamp="20241024 00:59:01.174" level="TRACE">Return: '/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//logs'</msg>
<msg timestamp="20241024 00:59:01.174" level="INFO">${logs_dir} = /home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//logs</msg>
<status status="PASS" starttime="20241024 00:59:01.174" endtime="20241024 00:59:01.174"/>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<arg>${logs_dir}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20241024 00:59:01.174" level="TRACE">Arguments: [ '/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//logs' ]</msg>
<msg timestamp="20241024 00:59:01.174" level="INFO" html="true">Directory '&lt;a href="file:///home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests/logs"&gt;/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests/logs&lt;/a&gt;' already exists.</msg>
<msg timestamp="20241024 00:59:01.174" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:59:01.174" endtime="20241024 00:59:01.174"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${log_path}</var>
<arg>${logs_dir}/${test_name}.log</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20241024 00:59:01.174" level="TRACE">Arguments: [ '/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//logs/test2.Should_Print_Version.fail0.log' ]</msg>
<msg timestamp="20241024 00:59:01.174" level="TRACE">Return: '/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//logs/test2.Should_Print_Version.fail0.log'</msg>
<msg timestamp="20241024 00:59:01.174" level="INFO">${log_path} = /home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//logs/test2.Should_Print_Version.fail0.log</msg>
<status status="PASS" starttime="20241024 00:59:01.174" endtime="20241024 00:59:01.174"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>!!!!! Log saved to "${log_path}"</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20241024 00:59:01.174" level="TRACE">Arguments: [ '!!!!! Log saved to "/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//logs/test2.Should_Print_Version.fail0.log"' ]</msg>
<msg timestamp="20241024 00:59:01.174" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:59:01.174" endtime="20241024 00:59:01.174"/>
</kw>
<kw name="Save Cached Log" library="Remote">
<arg>${log_path}</arg>
<msg timestamp="20241024 00:59:01.175" level="TRACE">Arguments: [ '/home/embedded/EmbeddedTesting/TestingEmbedded/03_ExampleAppZephyr/example-application/tests/robot_tests//logs/test2.Should_Print_Version.fail0.log' ]</msg>
<msg timestamp="20241024 00:59:01.178" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:59:01.175" endtime="20241024 00:59:01.178"/>
</kw>
<msg timestamp="20241024 00:59:01.178" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:59:01.172" endtime="20241024 00:59:01.178"/>
</kw>
<msg timestamp="20241024 00:59:01.178" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:59:01.172" endtime="20241024 00:59:01.178"/>
</kw>
<status status="PASS" starttime="20241024 00:59:01.171" endtime="20241024 00:59:01.178"/>
</branch>
<status status="PASS" starttime="20241024 00:59:01.171" endtime="20241024 00:59:01.178"/>
</if>
<status status="PASS" starttime="20241024 00:59:01.171" endtime="20241024 00:59:01.178"/>
</branch>
<status status="PASS" starttime="20241024 00:59:01.171" endtime="20241024 00:59:01.178"/>
</if>
<if>
<branch type="IF" condition="${HOLD_ON_ERROR}">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<var>${res}</var>
<arg>Run Keyword And Ignore Error</arg>
<arg>Import Library</arg>
<arg>Dialogs</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="NOT RUN" starttime="20241024 00:59:01.179" endtime="20241024 00:59:01.179"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<arg>Run Keywords</arg>
<arg>Run Keyword If</arg>
<arg>'${res[0]}' == 'FAIL'</arg>
<arg>Log</arg>
<arg>Couldn't load the Dialogs library - interactive debugging is not possible</arg>
<arg>console=True</arg>
<arg>AND</arg>
<arg>Run Keyword If</arg>
<arg>'${res[0]}' != 'FAIL'</arg>
<arg>Open GUI</arg>
<arg>AND</arg>
<arg>Run Keyword If</arg>
<arg>'${res[0]}' != 'FAIL'</arg>
<arg>Pause Execution</arg>
<arg>Test failed. Press OK once done debugging.</arg>
<arg>AND</arg>
<arg>Run Keyword If</arg>
<arg>'${res[0]}' != 'FAIL'</arg>
<arg>Close GUI</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="NOT RUN" starttime="20241024 00:59:01.179" endtime="20241024 00:59:01.179"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:59:01.178" endtime="20241024 00:59:01.179"/>
</branch>
<status status="PASS" starttime="20241024 00:59:01.178" endtime="20241024 00:59:01.179"/>
</if>
<kw name="Reset Emulation" library="Remote">
<msg timestamp="20241024 00:59:01.179" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20241024 00:59:01.207" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:59:01.179" endtime="20241024 00:59:01.207"/>
</kw>
<kw name="Clear Cached Log" library="Remote">
<msg timestamp="20241024 00:59:01.208" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20241024 00:59:01.211" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20241024 00:59:01.208" endtime="20241024 00:59:01.211"/>
</kw>
<msg timestamp="20241024 00:59:01.211" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:59:01.088" endtime="20241024 00:59:01.211"/>
</kw>
<doc>Tests shell responsiveness in Zephyr on the Leon3 platform.</doc>
<tag>uart</tag>
<tag>zephyr</tag>
<status status="FAIL" starttime="20241024 00:58:59.625" endtime="20241024 00:59:01.211">InvalidOperationException: Terminal tester failed!

Full report:
([host: 10/24/2024 12:59:00 AM, virt: 1.30349] Attached to UART event: success)
[host: 10/24/2024 12:59:00 AM, virt:       1] 8*** Booting Zephyr OS build v3.7.0-4958-g69b73ebb0ab9 ***
[host: 10/24/2024 12:59:00 AM, virt:       2] uart:~$ 8Zephyr Example Application 1.0.0
[host: 10/24/2024 12:59:00 AM, virt:       2] uart:~$ 8Use the sensor to change LED blinking period
[host: 10/24/2024 12:59:00 AM, virt:       3] uart:~$ 8[00:00:00.001,000] &lt;inf&gt; util_drv: UtilDriver Initialized
[host: 10/24/2024 12:59:00 AM, virt:       3] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; mux_drv: MuxDriver initialized
[host: 10/24/2024 12:59:00 AM, virt:       4] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; lckr_stat: I2C: Device is ready.
[host: 10/24/2024 12:59:00 AM, virt:       5] uart:~$ 8[00:00:00.002,000] &lt;inf&gt; lckr_stat: LockerStatusReader initialized
[host: 10/24/2024 12:59:00 AM, virt:       5] uart:~$ 8[00:00:00.002,000] &lt;...
    [ Message content over the limit has been removed. ]
...rt:     517] uart:~$ 8[00:00:02.405,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:00 AM, virt:     745] uart:~$ 8uart:~$ 8[00:00:02.905,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:00 AM, virt:     746] uart:~$ 8[00:00:03.606,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:00 AM, virt:     974] uart:~$ 8uart:~$ 8[00:00:04.106,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:00 AM, virt:     975] uart:~$ 8[00:00:04.109,000] &lt;inf&gt; lckr_drv: Locker closed
[host: 10/24/2024 12:59:00 AM, virt:     976] uart:~$ 8[00:00:04.807,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:01 AM, virt:    1203] uart:~$ 8uart:~$ 8[00:00:05.307,000] &lt;err&gt; lckr_stat: Error reading i2c
[host: 10/24/2024 12:59:01 AM, virt:    1204] uart:~$ 8[00:00:06.008,000] &lt;err&gt; lckr_stat: Error reading i2c
uart:~$ 8uart:~$  [[no newline]]
([host: 10/24/2024 12:59:01 AM, virt:  1254.2] Line containing &gt;&gt;Zephyr version 3.7.0&lt;&lt; event: failure)
--- Current line buffer contains 19 characters: &gt;&gt;uart:~$ 8uart:~$ &lt;&lt;</status>
</test>
<kw name="Teardown" library="renode-keywords" type="TEARDOWN">
<msg timestamp="20241024 00:59:01.213" level="TRACE">Arguments: [  ]</msg>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER}">
<kw name="Stop Remote Server" library="Remote">
<status status="NOT RUN" starttime="20241024 00:59:01.213" endtime="20241024 00:59:01.213"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:59:01.213" endtime="20241024 00:59:01.213"/>
</branch>
<status status="PASS" starttime="20241024 00:59:01.213" endtime="20241024 00:59:01.213"/>
</if>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER}">
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<status status="NOT RUN" starttime="20241024 00:59:01.213" endtime="20241024 00:59:01.213"/>
</kw>
<status status="NOT RUN" starttime="20241024 00:59:01.213" endtime="20241024 00:59:01.213"/>
</branch>
<status status="PASS" starttime="20241024 00:59:01.213" endtime="20241024 00:59:01.213"/>
</if>
<msg timestamp="20241024 00:59:01.213" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20241024 00:59:01.213" endtime="20241024 00:59:01.213"/>
</kw>
<meta name="HotSpot_Action">-</meta>
<status status="FAIL" starttime="20241024 00:58:56.147" endtime="20241024 00:59:01.213"/>
</suite>
<statistics>
<total>
<stat pass="1" fail="1" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="1" skip="0">uart</stat>
<stat pass="1" fail="1" skip="0">zephyr</stat>
</tag>
<suite>
<stat pass="1" fail="1" skip="0" id="s1" name="Test Suite">Test Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
